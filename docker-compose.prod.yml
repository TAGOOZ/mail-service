services:
  # MongoDB database
  mongodb:
    image: ${MONGODB_IMAGE}
    container_name: ${MONGODB_CONTAINER_NAME}
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
    ports:
      - '127.0.0.1:${MONGODB_PORT}:27017' # Bind to localhost only for security
    volumes:
      - mongodb_prod_data:/data/db
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - tempmail-network
    command: ['mongod', '--config', '/etc/mongod.conf']
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: ${HEALTH_CHECK_START_PERIOD}
    deploy:
      resources:
        limits:
          memory: ${MONGODB_MEMORY_LIMIT}
          cpus: '${MONGODB_CPU_LIMIT}'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Redis cache
  redis:
    image: ${REDIS_IMAGE}
    container_name: ${REDIS_CONTAINER_NAME}
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - '127.0.0.1:${REDIS_PORT}:6379' # Bind to localhost only for security
    volumes:
      - redis_prod_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - tempmail-network
    command: ['redis-server', '/etc/redis/redis.conf']
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: ${HEALTH_CHECK_START_PERIOD}
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT}
          cpus: '${REDIS_CPU_LIMIT}'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
      args:
        NODE_ENV: ${NODE_ENV}
    container_name: ${BACKEND_CONTAINER_NAME}
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${BACKEND_PORT}
      MONGODB_URI: mongodb://${MONGODB_ROOT_USERNAME}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?authSource=admin
      REDIS_URL: redis://redis:6379
      MAIL_DOMAIN: ${MAIL_DOMAIN}
      MAIL_PORT: ${MAIL_PORT}
      # SMTP settings for outgoing emails (send to MailHog for testing)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      # CORS settings
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: DEBUG
      # Security settings
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      SESSION_SECRET: ${SESSION_SECRET}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS}
      CORS_ADDITIONAL_ORIGINS: ${CORS_ADDITIONAL_ORIGINS}
      CORS_CREDENTIALS: ${CORS_CREDENTIALS}
      CORS_METHODS: ${CORS_METHODS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS}
      CORS_EXPOSED_HEADERS: ${CORS_EXPOSED_HEADERS}
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}
    ports:
      - '127.0.0.1:${BACKEND_PORT}:${BACKEND_PORT}' # Bind to localhost only, nginx will proxy
      - '127.0.0.1:${MAIL_PORT}:${MAIL_PORT}' # Internal mail processing port (accessed by mailserver)
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tempmail-network
    volumes:
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${BACKEND_PORT}/api/health']
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: ${BACKEND_MEMORY_LIMIT}
          cpus: '${BACKEND_CPU_LIMIT}'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Frontend application
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.prod
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL}
        REACT_APP_MAIL_DOMAIN: ${REACT_APP_MAIL_DOMAIN}
    container_name: tempmail-frontend-prod
    restart: unless-stopped
    env_file:
      - .env
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL}
      REACT_APP_MAIL_DOMAIN: ${REACT_APP_MAIL_DOMAIN}
      REACT_APP_VERSION: ${REACT_APP_VERSION}
      FRONTEND_PORT: ${FRONTEND_PORT}
    ports:
      - '127.0.0.1:${FRONTEND_PORT}:80' # Bind to localhost only, nginx will proxy
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - tempmail-network
    volumes:
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Mail server (Postfix) - Acts as SMTP frontend, forwards to backend
  mailserver:
    build:
      context: .
      dockerfile: Dockerfile.postfix
    container_name: ${MAILSERVER_CONTAINER_NAME}
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTFIX_MYHOSTNAME: ${POSTFIX_MYHOSTNAME}
      POSTFIX_MYDOMAIN: ${POSTFIX_MYDOMAIN}
      POSTFIX_MYORIGIN: ${POSTFIX_MYORIGIN}
      # Configure to forward all mail to backend
      POSTFIX_RELAY_HOST: backend
      POSTFIX_RELAY_PORT: ${MAIL_PORT}
    ports:
      - '${POSTFIX_SMTP_PORT}:25' # Standard SMTP port
      - '${POSTFIX_SUBMISSION_PORT}:587' # SMTP submission port (optional)
    volumes:
      - mailserver_prod_data:/var/spool/postfix
      - ./config/postfix:/etc/postfix/custom:ro
      - ./logs/postfix:/var/log/postfix
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - tempmail-network
    healthcheck:
      test: ['CMD', 'postfix', 'status']
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: ${MAILSERVER_MEMORY_LIMIT}
          cpus: '${MAILSERVER_CPU_LIMIT}'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Nginx reverse proxy
  nginx:
    image: ${NGINX_IMAGE}
    container_name: ${NGINX_CONTAINER_NAME}
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./config/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
      mailserver:
        condition: service_healthy
    networks:
      - tempmail-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/health']
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: ${HEALTH_CHECK_START_PERIOD}
    deploy:
      resources:
        limits:
          memory: ${NGINX_MEMORY_LIMIT}
          cpus: '${NGINX_CPU_LIMIT}'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Monitoring and logging
  watchtower:
    image: containrrr/watchtower
    container_name: tempmail-watchtower
    restart: unless-stopped
    env_file:
      - .env
    environment:
      WATCHTOWER_CLEANUP: 'true'
      WATCHTOWER_POLL_INTERVAL: 3600
      WATCHTOWER_INCLUDE_STOPPED: 'true'
      WATCHTOWER_REVIVE_STOPPED: 'false'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - tempmail-network

volumes:
  mongodb_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tempmail/data/mongodb
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tempmail/data/redis
  mailserver_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tempmail/data/mailserver

networks:
  tempmail-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
